{"version":3,"file":"aframe-audio-analyser.js","sources":["../src/audioanalyser.js"],"sourcesContent":["if (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\nvar audioBufferCache = {};\r\n\r\n/**\r\n * Audio visualizer component for A-Frame using AnalyserNode.\r\n */\r\nAFRAME.registerComponent('audioanalyser', {\r\n  schema: {\r\n    buffer: { default: false },\r\n    beatStartCutoff: { default: 0.8 },\r\n    beatEndCutoff: { default: 0.75 },\r\n    cache: { default: false },\r\n    enabled: { default: true },\r\n    enableBeatDetection: { default: true },\r\n    enableLevels: { default: true },\r\n    enableWaveform: { default: true },\r\n    enableVolume: { default: true },\r\n    fftSize: { default: 2048 },\r\n    smoothingTimeConstant: { default: 0.8 },\r\n    src: {\r\n      parse: function (val) {\r\n        if (val.constructor !== String) {\r\n          return val;\r\n        }\r\n        if (val.startsWith('#') || val.startsWith('.')) {\r\n          return document.querySelector(val);\r\n        }\r\n        return val;\r\n      },\r\n    },\r\n    unique: { default: false },\r\n  },\r\n\r\n  init: function () {\r\n    this.audioEl = null;\r\n    this.levels = null;\r\n    this.waveform = null;\r\n    this.volume = 0;\r\n    this.xhr = null;\r\n\r\n    this.beat_low = false;\r\n    this.beat_mid = false;\r\n    this.beat_high = false;\r\n    this.beat_low_max = 20;\r\n    this.beat_mid_max = 20;\r\n    this.beat_high_max = 20;\r\n\r\n    this.initContext();\r\n  },\r\n\r\n  update: function (oldData) {\r\n    var analyser = this.analyser;\r\n    var data = this.data;\r\n\r\n    // Update analyser stuff.\r\n    if (oldData.fftSize !== data.fftSize || oldData.smoothingTimeConstant !== data.smoothingTimeConstant) {\r\n      analyser.fftSize = data.fftSize;\r\n      analyser.smoothingTimeConstant = data.smoothingTimeConstant;\r\n      this.levels = new Uint8Array(analyser.frequencyBinCount);\r\n      this.waveform = new Uint8Array(analyser.fftSize);\r\n    }\r\n\r\n    if (!data.src) {\r\n      return;\r\n    }\r\n    this.refreshSource();\r\n  },\r\n\r\n  /**\r\n   * Update spectrum on each frame.\r\n   */\r\n  tick: function (t, dt) {\r\n    var data = this.data;\r\n    var volume;\r\n\r\n    if (!data.enabled) {\r\n      return;\r\n    }\r\n\r\n    // Levels (frequency).\r\n    if (data.enableLevels || data.enableVolume) {\r\n      this.analyser.getByteFrequencyData(this.levels);\r\n    }\r\n\r\n    // Waveform.\r\n    if (data.enableWaveform) {\r\n      this.analyser.getByteTimeDomainData(this.waveform);\r\n    }\r\n\r\n    // Average volume.\r\n    if (data.enableVolume || data.enableBeatDetection) {\r\n      var sum = 0;\r\n      for (var i = 0; i < this.levels.length; i++) {\r\n        sum += this.levels[i];\r\n      }\r\n      this.volume = sum / this.levels.length;\r\n    }\r\n\r\n    // Beat detection.\r\n    if (data.enableBeatDetection) {\r\n      //frequencies here are on a scale of 0 - 23600hz\r\n      let val = this.beatInRange(1, 350, this.beat_low, this.beat_low_max, 'audioanalyser-beat-low');\r\n      this.beat_low = val[0];\r\n      this.beat_low_max = val[1];\r\n      val = this.beatInRange(500, 2000, this.beat_mid, this.beat_mid_max, 'audioanalyser-beat-mid');\r\n      this.beat_mid = val[0];\r\n      this.beat_mid_max = val[1];\r\n      val = this.beatInRange(4000, 10000, this.beat_high, this.beat_high_max, 'audioanalyser-beat-high');\r\n      this.beat_high = val[0];\r\n      this.beat_high_max = val[1];\r\n    }\r\n  },\r\n\r\n  //uses fourier transforms to detect beats in a given frequency range\r\n  beatInRange: function (_start, _end, _lastBeat, beat_max, _emitName) {\r\n    const frequencyLength = this.levels.length;\r\n    const adjStart = Math.floor((_start / 23600) * frequencyLength);\r\n    const adjEnd = Math.floor((_end / 23600) * frequencyLength);\r\n\r\n    const slice = this.levels.slice(adjStart, adjEnd);\r\n    const average = slice.reduce((a, b) => a + b) / slice.length;\r\n\r\n    beat_max = Math.max(average, beat_max);\r\n\r\n    if (average >= beat_max * this.data.beatStartCutoff && _lastBeat == false) {\r\n      this.el.emit(_emitName, null, false);\r\n      return [true, beat_max];\r\n    } else if (average < beat_max * this.data.beatEndCutoff && _lastBeat == true) {\r\n      return [false, beat_max];\r\n    }\r\n    return [_lastBeat, beat_max];\r\n  },\r\n\r\n  initContext: function () {\r\n    var data = this.data;\r\n    var analyser;\r\n    var gainNode;\r\n\r\n    this.context = new (window.webkitAudioContext || window.AudioContext)();\r\n    analyser = this.analyser = this.context.createAnalyser();\r\n    gainNode = this.gainNode = this.context.createGain();\r\n    gainNode.connect(analyser);\r\n    analyser.connect(this.context.destination);\r\n    analyser.fftSize = data.fftSize;\r\n    analyser.smoothingTimeConstant = data.smoothingTimeConstant;\r\n    this.levels = new Uint8Array(analyser.frequencyBinCount);\r\n    this.waveform = new Uint8Array(analyser.fftSize);\r\n  },\r\n\r\n  refreshSource: function () {\r\n    var analyser = this.analyser;\r\n    var data = this.data;\r\n\r\n    if (data.buffer && data.src.constructor === String) {\r\n      this.getBufferSource().then((source) => {\r\n        this.source = source;\r\n        this.source.connect(this.gainNode);\r\n      });\r\n    } else {\r\n      this.source = this.getMediaSource();\r\n      this.source.connect(this.gainNode);\r\n    }\r\n  },\r\n\r\n  suspendContext: function () {\r\n    this.context.suspend();\r\n  },\r\n\r\n  resumeContext: function () {\r\n    this.context.resume();\r\n  },\r\n\r\n  /**\r\n   * Fetch and parse buffer to audio buffer. Resolve a source.\r\n   */\r\n  fetchAudioBuffer: function (src) {\r\n    // From cache.\r\n    if (audioBufferCache[src]) {\r\n      if (audioBufferCache[src].constructor === Promise) {\r\n        return audioBufferCache[src];\r\n      } else {\r\n        return Promise.resolve(audioBufferCache[src]);\r\n      }\r\n    }\r\n\r\n    if (!this.data.cache) {\r\n      Object.keys(audioBufferCache).forEach(function (src) {\r\n        delete audioBufferCache[src];\r\n      });\r\n    }\r\n\r\n    audioBufferCache[src] = new Promise((resolve) => {\r\n      // Fetch if does not exist.\r\n      const xhr = (this.xhr = new XMLHttpRequest());\r\n      xhr.open('GET', src);\r\n      xhr.responseType = 'arraybuffer';\r\n      xhr.addEventListener('load', () => {\r\n        // Support Webkit with callback.\r\n        function cb(audioBuffer) {\r\n          audioBufferCache[src] = audioBuffer;\r\n          resolve(audioBuffer);\r\n        }\r\n        const res = this.context.decodeAudioData(xhr.response, cb);\r\n        if (res && res.constructor === Promise) {\r\n          res.then(cb).catch(console.error);\r\n        }\r\n      });\r\n      xhr.send();\r\n    });\r\n    return audioBufferCache[src];\r\n  },\r\n\r\n  getBufferSource: function () {\r\n    var data = this.data;\r\n    return this.fetchAudioBuffer(data.src)\r\n      .then(() => {\r\n        var source;\r\n        source = this.context.createBufferSource();\r\n        source.buffer = audioBufferCache[data.src];\r\n        this.el.emit('audioanalyserbuffersource', source, false);\r\n        return source;\r\n      })\r\n      .catch(console.error);\r\n  },\r\n\r\n  getMediaSource: (function () {\r\n    const nodeCache = {};\r\n\r\n    return function () {\r\n      const src = this.data.src.constructor === String ? this.data.src : this.data.src.src;\r\n      if (nodeCache[src]) {\r\n        return nodeCache[src];\r\n      }\r\n\r\n      if (this.data.src.constructor === String) {\r\n        this.audio = document.createElement('audio');\r\n        this.audio.crossOrigin = 'anonymous';\r\n        this.audio.setAttribute('src', this.data.src);\r\n      } else {\r\n        this.audio = this.data.src;\r\n      }\r\n      const node = this.context.createMediaElementSource(this.audio);\r\n\r\n      nodeCache[src] = node;\r\n      return node;\r\n    };\r\n  })(),\r\n});\r\n"],"names":["AFRAME","Error","nodeCache","audioBufferCache","registerComponent","schema","buffer","default","beatStartCutoff","beatEndCutoff","cache","enabled","enableBeatDetection","enableLevels","enableWaveform","enableVolume","fftSize","smoothingTimeConstant","src","parse","val","constructor","String","startsWith","document","querySelector","unique","init","this","audioEl","levels","waveform","volume","xhr","beat_low","beat_mid","beat_high","beat_low_max","beat_mid_max","beat_high_max","initContext","update","oldData","analyser","data","Uint8Array","frequencyBinCount","refreshSource","tick","t","dt","getByteFrequencyData","getByteTimeDomainData","sum","i","length","beatInRange","_start","_end","_lastBeat","beat_max","_emitName","frequencyLength","adjStart","Math","floor","adjEnd","slice","average","reduce","a","b","max","el","emit","context","window","webkitAudioContext","AudioContext","createAnalyser","gainNode","createGain","connect","destination","getBufferSource","then","source","_this","getMediaSource","suspendContext","suspend","resumeContext","resume","fetchAudioBuffer","Promise","resolve","Object","keys","forEach","_this2","XMLHttpRequest","open","responseType","addEventListener","cb","audioBuffer","res","decodeAudioData","response","console","error","send","_this3","createBufferSource","audio","createElement","crossOrigin","setAttribute","node","createMediaElementSource"],"mappings":"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"}